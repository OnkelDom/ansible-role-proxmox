---
# tasks file
- name: get api auth ticket
  uri:
    url: "https://{{ pve_api_host }}:{{ pve_api_port }}/api2/json/access/ticket"
    method: POST
    body:
      username: "{{ pve_api_user }}"
      password: "{{ pve_api_pass }}"
    validate_certs: "{{ pve_disable_cert_check | default('no') }}"
    follow_redirects: all
    body_format: form-urlencoded
  register: pve_node_ticket

- name: get proxmox nodes
  uri:
    url: "https://{{ pve_api_host }}:{{ pve_api_port }}/api2/json/nodes"
    method: GET
    headers:
      Cookie: "PVEAuthCookie={{ pve_node_ticket.json.data.ticket }}"
    body_format: form-urlencoded
    return_content: yes
    validate_certs: "{{ pve_disable_cert_check | default('no') }}"
  register: pve_node_list

- name: get existing containers
  uri:
    url: "https://{{ pve_api_host }}:{{ pve_api_port }}/api2/json/nodes/{{ item.node }}/lxc"
    method: GET
    headers:
      Cookie: "PVEAuthCookie={{ pve_node_ticket.json.data.ticket }}"
    body_format: form-urlencoded
    return_content: yes
    validate_certs: "{{ pve_disable_cert_check | default('no') }}"
  loop: "{{ pve_node_list.json.data }}"
  register: pve_ct_list
  # Output is very noisey
  no_log: True

- name: compile all containers in cluster
  set_fact:
    pve_ct_list_clean: "{{ pve_ct_list_clean + item.json.data }}"
  loop: "{{ pve_ct_list.results }}"
  no_log: true

- name: container already exists
  set_fact:
    pve_container_exists: True
  when: pve_hostname in pve_ct_list_clean|json_query('[*].name')

- name: container does not exist
  set_fact:
    pve_container_exists: False
  when: pve_hostname not in pve_ct_list_clean|json_query('[*].name')

- name: identify node that container is currently running on
  set_fact:
    pve_existing_node: "{{ item.item.node }}"
  when:
    - pve_container_exists
    - pve_hostname in item.json.data|json_query('[*].name')
  loop: "{{ pve_ct_list.results }}"
  no_log: True

- name: get list of runnings containers
  set_fact:
    pve_exists_node_list: "{{ item.json.data }}"
  when: pve_hostname in item.json.data|json_query('[*].name')
  loop: "{{ pve_ct_list.results }}"
  no_log: True

- name: get container facts
  set_fact:
    pve_exists_facts: "{{ item }}"
  loop: "{{ pve_exists_node_list }}"
  when: item.name == pve_hostname
  no_log: True

- debug: msg="Proxmox container {{ pve_exists_facts.name }} exists on node {{ pve_existing_node }}"

- name: Get list available templates on node
  uri:
    url: "https://{{ pve_node }}:{{ pve_api_port }}/api2/json/nodes/{{ pve_node }}/storage/{{ pve_ct_storage_location }}/content"
    method: GET
    headers:
      Cookie: "PVEAuthCookie={{ pve_node_ticket.json.data.ticket }}"
    body_format: form-urlencoded
    return_content: yes
    validate_certs: "{{ pve_disable_cert_check | default('no') }}"
  register: pve_ct_template_list

- name: determine if template is available on node
  set_fact:
    pve_ct_template_exists: true
  loop: "{{ pve_ct_template_list.json.data }}"
  when: pve_template == item.volid

- name: download template if missing
  command: "pveam download {{ pve_ct_storage_location }} {{ pve_template.split('local:vztmpl/')[1] }}"
  delegate_to: "{{ pve_api_host }}"
  register: pve_ct_template_download
  ignore_errors: True
  when: not pve_ct_template_exists

- name: fail when template download has errors
  fail: msg="Failed to find container, error is {{ pve_ct_template_download.stderr_lines }}"
  when: not pve_ct_template_exists and pve_ct_template_download.rc != 0

- name: provision container
  proxmox:
    vmid: "{{ pve_vmid | default(omit) }}"
    node: "{{ pve_node | default(omit) }}"
    api_user: "{{ pve_api_user }}"
    api_password: "{{ pve_api_pass }}"
    api_host: "{{ pve_api_host }}"
    state: "{{ pve_state | default('present') }}"
    hostname: "{{ pve_hostname | default(omit) }}"
    ostemplate: "{{ pve_template | default (omit) }}"
    mounts: "{{ pve_mounts | default(omit) }}"
    netif: "{{ pve_netif | default(omit) }}"
    cores: "{{ pve_cores | default(omit) }}"
    memory: "{{ pve_mem | default(omit) }}"
    swap: "{{ pve_swap | default(omit) }}"
    password: "{{ pve_guest_pass | default(omit) }}"
    searchdomain: "{{ pve_search | default(omit) }}"
    nameserver: "{{ pve_dns | default(omit) }}"
    storage: "{{ pve_storage | default(omit) }}"
    disk: "{{ pve_disk_size | default(omit) }}"
    unprivileged: "{{ pve_unprivileged | default(omit) }}"
    pubkey: "{{ pve_ssh | default(omit) }}"
    onboot: "{{ pve_onboot | default(omit) }}"
    timeout: 90
  register: pve_info
  async: 45
  poll: 5
  notify: Set vmid
